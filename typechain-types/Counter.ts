/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface CounterInterface extends Interface {
  getFunction(nameOrSignature: "dec" | "get" | "inc"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Decrement" | "Increment"): EventFragment;

  encodeFunctionData(functionFragment: "dec", values?: undefined): string;
  encodeFunctionData(functionFragment: "get", values?: undefined): string;
  encodeFunctionData(functionFragment: "inc", values?: undefined): string;

  decodeFunctionResult(functionFragment: "dec", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "inc", data: BytesLike): Result;
}

export namespace DecrementEvent {
  export type InputTuple = [caller: AddressLike, newValue: BigNumberish];
  export type OutputTuple = [caller: string, newValue: bigint];
  export interface OutputObject {
    caller: string;
    newValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IncrementEvent {
  export type InputTuple = [caller: AddressLike, newValue: BigNumberish];
  export type OutputTuple = [caller: string, newValue: bigint];
  export interface OutputObject {
    caller: string;
    newValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Counter extends BaseContract {
  connect(runner?: ContractRunner | null): Counter;
  waitForDeployment(): Promise<this>;

  interface: CounterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  dec: TypedContractMethod<[], [void], "nonpayable">;

  get: TypedContractMethod<[], [bigint], "view">;

  inc: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "dec"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "get"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "inc"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "Decrement"
  ): TypedContractEvent<
    DecrementEvent.InputTuple,
    DecrementEvent.OutputTuple,
    DecrementEvent.OutputObject
  >;
  getEvent(
    key: "Increment"
  ): TypedContractEvent<
    IncrementEvent.InputTuple,
    IncrementEvent.OutputTuple,
    IncrementEvent.OutputObject
  >;

  filters: {
    "Decrement(address,uint256)": TypedContractEvent<
      DecrementEvent.InputTuple,
      DecrementEvent.OutputTuple,
      DecrementEvent.OutputObject
    >;
    Decrement: TypedContractEvent<
      DecrementEvent.InputTuple,
      DecrementEvent.OutputTuple,
      DecrementEvent.OutputObject
    >;

    "Increment(address,uint256)": TypedContractEvent<
      IncrementEvent.InputTuple,
      IncrementEvent.OutputTuple,
      IncrementEvent.OutputObject
    >;
    Increment: TypedContractEvent<
      IncrementEvent.InputTuple,
      IncrementEvent.OutputTuple,
      IncrementEvent.OutputObject
    >;
  };
}
